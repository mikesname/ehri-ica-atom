<refentry id="{@id}">
  <refnamediv>
    <refname>User Guide for FluentDOM</refname>
    <refpurpose></refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <author>Bastian Feder</author>
    <author>Thomas Weinert</author>
  </refsynopsisdiv>
  {@toc}
  <refsect1 id="{@id intro}">
    <title>FluentDOM</title>
    <para>
      FluentDOM ist a jQuery like fluent XML interface for the DOMDocument in PHP.
    </para>
    <para>
      The idea was born in a workshop of {@link http://schlitt.info Tobias Schlitt},
      about the PHP XML extensions at the IPC Spring, in Berlin. He used this idea to show
      XPath samples in the session.
    </para>
    <para>
      Many thanks to the {@link http://jquery.com jQuery} people for their work,
      who did an exceptional job describing their interfaces and providing examples.
      This saved us a lot of work.
    </para>
    <para>
      We implemented most of the jQuery methods into FluentDOM, but there are
      differences. Most important: we use XPath for expressions, not CSS selectors.
      Since XPath is supported by the ext/xml extension, no extra parsing need
      to be done. This should be faster processing the selectors and btw. it was
      easier for us to implement. And as a nice topping it supports namespaces, too.
    </para>
    <para>
      We implemented several php interfaces: Countable, IteratorAggregate,
      SeekableIterator and RecursiveItrerator. Even ArrayAccess is supported.
    </para>
    <para>
      Since FluentDOM works on XML documents, there is no method 'html()', but 'xml()'.
    </para>
    <para>
      We support the string conversion using the magic __toString() method. It
      will output the xml or html of the associated DOMDocument.
    </para>
    <para>
      FluentDOM needs a document. If you do not provide a valid source, an empty one
      will be created.
    </para>
    <para>
      XPath do not only match element nodes (nodes with a tag name and maybe children),
      but text nodes, too. Which implicitly enhances FluentDOM to support them.
    </para>
    <para>
      To be able to write phpUnit Tests and develop FluentDOM a lot of examples
      where written. Most of them are copied and adapted from or are deeply
      inspired by the jQuery documentation. They are located in the 'examples'
      folder and linked in the documentation.
      Once again many thanks to the jQuery team.
    </para>
  </refsect1>
  <refsect1 id="{@id basic-usage}">
    <title>Basic Usage</title>
    <para>This section shows some of the basic operation.</para>
    <refsect2 id="{@id basic-usage-class}">
      <title>FluentDOM Function</title>
      <para>
        The FluentDOM function is a little wrapper. It creates a new FluentDOM object and loads
        the source if it was provided. Possible sources are local XML or HTML files, XML or
        HTML strings, DOMDocument DOMNode objects or a FluentDOM object. The following two samples
        do the same.
      </para>
      <refsect3>
        <title>Function Sample</title>
        {@example basic-usage/function.php}
      </refsect3>
      <refsect3>
        <title>Object Sample</title>
        {@example basic-usage/object.php}
      </refsect3>
    </refsect2>
    <refsect2 id="{@id basic-usage-load}">
      <title>Loading Data</title>
      <para>
        You can use different ways to load a source into a FluentDOM object. The simplest way
        is the FluentDOM function. But sometimes you need more. The default loaders
        do not support URLs for example. But here are other ways:
      </para>
      <refsect3>
        <title>Prepare A DOMDocument</title>
        <para>
          The first way is to create a DOMDocument with custom logic and load this into the
          FluentDOM object.
        </para>
        {@example basic-usage/load-domdocument.php}
      </refsect3>
      <refsect3>
        <title>Use The "document" Attribute</title>
        <para>
          The FluentDOM has an read only attribute <literal>document</literal>. You can not
          assign a value to this attribute directly. But you have access to all its methods and
          attributes. This example uses <literal>DOMDocument::load()</literal> to load the XML file.
        </para>
        {@example basic-usage/load-document.php}
      </refsect3>
      <refsect3>
        <title>Custom Loader</title>
        <para>
          FluentDOM allows to use custom loaders. This are simple classes implementing the
          FluentDOMLoader interface. The interface has a single function <literal>load()</literal>.  
        </para>
        {@example basic-usage/load-custom.php}
      </refsect3>
    </refsect2>
    <refsect2 id="{@id basic-usage-find}">
      <title>Find Elements</title>
      <para>
        <caution>The selector language used in FluentDOM is XPath, not CSS.</caution>
      </para> 
      <para>
        The method <literal>find()</literal> is used to select some elements from the document.
        The selector parameter can be an XPath query or a callback function. XPath is a little
        different from CSS but more powerful. More important it is implemented in the PHP extension
        and faster any PHP based CSS selector implementation could be.
      </para>
      {@example basic-usage/find-xpath.php}
      <para>
        If the FluentDOM object already contains a selection, the selector will be used with each
        selected element. If you this is the first action on the object, the document context is
        used. You can force the document context with the second parameter.
      </para>
    </refsect2>
  </refsect1>
  <refsect1 id="{@id tutorial-menu}">
    <title>Tutorial: Create A HTML Menu</title>
    <refsect2 id="{@id tutorial-menu-step1}">
      <title>Step 1: The Root Element</title>
      <para>
        After the FluentDOM class is included an instance of it is created.
        The default content type of a FluentDOM object is XML.
        For this tutorial it is changed to HTML.
      </para>
      {@example menu/step1.php}
      <para>
        The method append() appends elements to the current selection and returns a FluentDOM
        with the appended elements. For later use this is assigned to a variable.
      </para>
      <para>
        The example uses a string parameter to define the tag. This has to be some text
        or a valid xml tree with a single root node.
      </para>
      <para>
        The parameter can be an DOMNode, too. It is up to you which way you prefer.
      </para>
      {@example menu/step1b.php}
    </refsect2>
    <refsect2 id="{@id tutorial-menu-step2}">
      <title>Step 2: Add Menu Items</title>
      <para>
        A menu without items is useless. Using the chaining a listitem is appended and a hyperlink
        into it. The link target is set using <literal>attr()</literal> and with <literal>text()</literal>
        a link caption is provided. These two methods do not change the selected elements.
      </para>
      {@example menu/step2.php}
    </refsect2>
    <refsect2 id="{@id tutorial-menu-step3}">
      <title>Step 3: Improve Menu Items</title>
      <para>
        Of course menu items can get classes. The method <literal>addClass()</literal> will
        add a class to all selected elements.
      </para>
      <para>
        Javascript links do not need to have a href attribute, <literal>attr()</literal> can set other
        parameters like <important>"id"</important> or <important>"onclick"</important>, too.
      </para>
      {@example menu/step3.php}
    </refsect2>
    <refsect2 id="{@id tutorial-menu-step4}">
      <title>Step 4: Mark Menu Items</title>
      <para>
        Often the first and/or the last element in a list need special threatment. To add classes
        to them <literal>find()</literal> is used to select them and <literal>addClass()</literal>
        to mark them.
      </para>
      <para>
        FluentDOM uses XPath for selectors. In XPath <important>"//"</important> selects elements at
        an level (from root) and <important>"[1]"</important> means that it has to be the first
        element in it's parent node.
      </para>
      {@example menu/step4.php}
    </refsect2>
    <refsect2 id="{@id tutorial-menu-step5}">
      <title>Step 5: Add A Submenu</title>
      <para>
        In the last step a submenu is added. The submenu is appended to the &lt;li&gt; tag.
        The method <literal>end()</literal> is used to jump to the previous selection.
      </para>
      {@example menu/step5.php}
    </refsect2>
  </refsect1>
  <refsect1 id="{@id xpath}">
    <title>XPath 101</title>
    <para>
      This is a little introduction into XPath. For further information see the links at the
      end of this section.
    </para>
    <refsect2 id="{@id xpath-syntax}">
      <title>Syntax elements</title>
      <itemizedlist>
        <listitem><literal>/</literal> - Level separator</listitem>
        <listitem><literal>//</literal> - Multi-level separator</listitem>
        <listitem><literal>*</literal> - Element wildcard</listitem>
        <listitem><literal>@</literal> - Attribute prefix</listitem>
        <listitem><literal>@*</literal> - Attribute wildcard</listitem>
        <listitem><literal>[ ]</literal> - Conditions</listitem>
        <listitem><literal>.</literal> - Current element</listitem>
        <listitem><literal>..</literal> - Parent element</listitem>
      </itemizedlist>
      <refsect3>
        <title>Simple XPath Selector Samples</title>
        <para>
          -match the document element with the name "element-name".
        </para>
        <example>/element-name</example>
        <para>
          Match all direct childs of the document element with the name "child".
        </para>
        <example>/*/child</example>
        <para>
          Match all elements with name "a" and attribute "href" anywhere in the document.
        </para>
        <example>//a[@href]</example>
        <para>
          Match all elements with name "strong" that are child (direct or not) of the current
          element.
        </para>
        <example>.//strong</example>
        <para>
          Match the first direct child of the current element.
        </para>
        <example>*[1]</example>
        <para>
          Match all elements with the name "div" in the current element with the attribute "id" set
          to "sampleOne".
        </para>
        <example>div[@id = "sampleOne"]</example>
      </refsect3>
    </refsect2>
    <refsect2 id="{@id xpath-functions}">
      <title>Functions</title>
      <itemizedlist>
        <listitem><literal>name()</literal> - Element name</listitem>
        <listitem><literal>local-name()</literal> - Element name wihtout namespace prefix</listitem>
        <listitem>
           <literal>position()</literal> - Position in parent element (starts with 1)</listitem>
        <listitem><literal>last()</literal> - Position of last element</listitem>
        <listitem><literal>count(...)</literal> - Element count</listitem>
        <listitem><literal>normalize-space()</literal> - Normalize withespaces</listitem>
        <listitem><literal>concat()</literal> - Concatinate strings</listitem>
        <listitem>
          <literal>contains()</literal> - Check if a string contains anther string
        </listitem>
      </itemizedlist>
      <para>
        This is only a selection of functions uses in the following samples. XPath knows some more.
      </para>
    </refsect2> 
  </refsect1>
</refentry>
